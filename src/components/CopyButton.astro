---
interface Props {
  textToCopy: string;
  className?: string;
}

const { textToCopy, className = "" } = Astro.props;
---

<button
  class={`absolute right-2 top-2 z-10 rounded-md bg-gray-800/80 p-1.5 text-white opacity-100 transition-all duration-200 hover:bg-gray-700 ${className}`}
  onclick={`
    navigator.clipboard.writeText('${textToCopy}').then(() => {
      this.innerHTML = '<svg class="h-3 w-3" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" /></svg>';
      setTimeout(() => {
        this.innerHTML = '<svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" /></svg>';
      }, 1000);
    });
  `}
  title="Copy name to clipboard"
>
  <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
    ></path>
  </svg>
</button>
