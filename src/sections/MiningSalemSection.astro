---
import { MinadoSalemData } from '@/data/minadoSalemData.ts';

interface MinadoData {
  num: number;
  tiempo: string;
  bloques: string;
  total: string;
  link: string;
}

function parseDuration(t: string): number {
  const parts = t.split(':').map(Number);
  return parts[0] * 3600 + parts[1] * 60 + parts[2];
}

const minadoData: MinadoData[] = MinadoSalemData.map(([num, tiempo, bloques, total, link]) => ({
  num: Number(num),
  tiempo: String(tiempo),
  bloques: String(bloques),
  total: String(total),
  link: String(link)
}));
---

<div class="2xl:max-w-6xl md:max-w-5xl mx-auto px-8 pt-5">
  <div class="flex">
    <h1 class="text-5xl font-ConcertOne mb-6 text-white">STREAMS DE MINAR - SALEM</h1>
    <img src="/images/emotes/auri-vanilla.webp" alt="Aurigas Logo" class="w-24" />
  </div>

  <div id="modalOverlay" class="fixed inset-0 bg-black/85 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg shadow-lg relative p-4 max-w-4xl w-full">
      <button id="closeModalBtn" class="absolute top-2 right-2 text-2xl text-gray-700">&times;</button>
      <canvas id="minadoChart" class="w-full h-96"></canvas>
    </div>
  </div>

  <div class="rounded-lg shadow-lg custom-scrollbar overflow-x-auto overflow-y-auto max-h-[62vh] bg-[#0a1224]">
    <table id="minadoTable" class="min-w-full divide-y divide-gray-700">
      <thead class="bg-[#121a2e]">
        <tr>
          <th data-sort="num" class="cursor-pointer hover:text-blue-400 px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
            <div class="flex items-center">
              Stream
              <span class="sort-arrow opacity-0 transition-opacity transition-transform duration-200 ml-1">
                <i class="fas fa-arrow-up"></i>
              </span>
            </div>
          </th>
          <th data-sort="tiempo" class="cursor-pointer hover:text-blue-400 px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
            <div class="flex items-center">
              Duración
              <span class="sort-arrow opacity-0 transition-opacity transition-transform duration-200 ml-1">
                <i class="fas fa-arrow-up"></i>
              </span>
            </div>
          </th>
          <th data-sort="bloques" class="cursor-pointer hover:text-blue-400 px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
            <div class="flex items-center">
              Bloques
              <span class="sort-arrow opacity-0 transition-opacity transition-transform duration-200 ml-1">
                <i class="fas fa-arrow-up"></i>
              </span>
            </div>
          </th>
          <th data-sort="total" class="cursor-pointer hover:text-blue-400 px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
            <div class="flex items-center">
              Total Picado
              <span class="sort-arrow opacity-0 transition-opacity transition-transform duration-200 ml-1">
                <i class="fas fa-arrow-up"></i>
              </span>
            </div>
          </th>
          <th data-sort="bps" class="cursor-pointer hover:text-blue-400 px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
            <div class="flex items-center">
              BPS
              <span class="sort-arrow opacity-0 transition-opacity transition-transform duration-200 ml-1">
                <i class="fas fa-arrow-up"></i>
              </span>
            </div>
          </th>
          <th class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Enlace</th>
        </tr>
      </thead>
      <tbody id="minadoTbody" class="bg-[#0a1224] divide-y divide-gray-700">
        {minadoData.map(({ num, tiempo, bloques, total, link }) => {
          const bloquesInt = parseInt(bloques.replace(/\./g, ''), 10);
          const segundos = parseDuration(tiempo);
          const bps = (bloquesInt / segundos).toFixed(2);
          return (
            <tr class="hover:bg-[#050a17] transition-colors">
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">#{num}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                <i class="fas fa-stopwatch mr-2 text-purple-400"></i>
                {tiempo}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-white font-semibold">
                <i class="fas fa-cube mr-2 text-blue-400"></i>
                {bloques}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-emerald-400 font-bold">
                <i class="fas fa-layer-group mr-2 text-green-400"></i>
                {total}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-200 font-medium">
                <i class="fas fa-bolt mr-2 text-yellow-400"></i>
                {bps}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm">
                <a 
                  href={link} 
                  target="_blank" 
                  class="text-purple-600 hover:text-indigo-900 flex items-center"
                  rel="noopener noreferrer"
                > 
                  <i class="fab fa-twitch mr-2"></i>
                  Ver sesión
                  <i class="fas fa-external-link-alt ml-2 text-xs"></i>
                </a>
              </td>
            </tr>
          );
        })}
      </tbody>
    </table>
  </div>
  
  <button id="openModalBtn" class="px-6 py-2.5 mt-2 bg-[#121a2e] cursor-pointer text-white rounded-sm hover:bg-gray-700">
    Mostrar Gráfica
  </button>
    
  <button id="exportCsvBtn" class="px-6 py-2.5 mt-2 bg-[#121a2e] cursor-pointer text-white rounded-sm hover:bg-gray-700 transition-transform">
    Exportar CSV
  </button>
  
  <div id="minadoData" data-minado={JSON.stringify(minadoData)} class="hidden"></div>

  <div class="mt-10 p-6 bg-gradient-to-b from-gray-900/80 to-blue-950 text-white 
              rounded-lg shadow-lg text-center">
    <h2 class="text-3xl font-extrabold mb-4 flex items-center justify-center gap-2">
      <i class="fas fa-code"></i> Script de Minado
    </h2>
    <p class="text-lg text-white/90 mb-6">
      Controla cuántos bloques has minado y cuánto te falta para terminar, al igual que Aurigas.  
      Descárgalo o revísalo aquí.
    </p>
    <a href="/script-minado"
      class="inline-flex items-center gap-3 bg-white text-gray-900 px-6 py-3 
              rounded-md font-semibold text-lg shadow-md 
              hover:bg-gray-200 hover:transition-transform hover:scale-105">
      <i class="fas fa-file-code text-2xl"></i> Ver Script
    </a>
  </div>
</div>

<script>
  import Chart from 'chart.js/auto';

  interface MinadoData {
    num: number;
    tiempo: string;
    bloques: string;
    total: string;
    link: string;
  }

  function disableScroll() {
    const scrollBarWidth = window.innerWidth - document.documentElement.clientWidth;
    document.body.style.overflow = 'hidden';
    document.body.style.paddingRight = scrollBarWidth + 'px';
  }

  function enableScroll() {
    document.body.style.overflow = '';
    document.body.style.paddingRight = '';
  }

  function parseDuration(t: string): number {
    const parts = t.split(':').map(Number);
    return parts[0] * 3600 + parts[1] * 60 + parts[2];
  }

  document.addEventListener("DOMContentLoaded", () => {
    const openModalBtn = document.getElementById('openModalBtn') as HTMLButtonElement;
    const closeModalBtn = document.getElementById('closeModalBtn') as HTMLButtonElement;
    const modalOverlay = document.getElementById('modalOverlay') as HTMLDivElement;
    const minadoDataElement = document.getElementById('minadoData') as HTMLDivElement;
    const tbody = document.getElementById('minadoTbody') as HTMLTableSectionElement;

    let tableData = JSON.parse(minadoDataElement?.dataset.minado || "[]") as MinadoData[];
    let currentSort = { column: '', ascending: true };

    function renderTable(data: MinadoData[]) {
      tbody.innerHTML = data.map(row => {
        const bloquesInt = parseInt(row.bloques.replace(/\./g, ''), 10);
        const segundos = parseDuration(row.tiempo);
        const bps = (bloquesInt / segundos).toFixed(2);
        return `
          <tr class="hover:bg-[#050a17] transition-colors">
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">#${row.num}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
              <i class="fas fa-stopwatch mr-2 text-purple-400"></i>
              ${row.tiempo}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-white font-semibold">
              <i class="fas fa-cube mr-2 text-blue-400"></i>
              ${row.bloques}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-emerald-400 font-bold">
              <i class="fas fa-layer-group mr-2 text-green-400"></i>
              ${row.total}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-200 font-medium">
              <i class="fas fa-bolt mr-2 text-yellow-400"></i>
              ${bps}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm">
              <a href="${row.link}" target="_blank" class="text-purple-600 hover:text-indigo-900 flex items-center" rel="noopener noreferrer">
                <i class="fab fa-twitch mr-2"></i>
                Ver sesión
                <i class="fas fa-external-link-alt ml-2 text-xs"></i>
              </a>
            </td>
          </tr>
        `;
      }).join('');
    }

    function updateHeaderStyles() {
      document.querySelectorAll('th[data-sort]').forEach(header => {
        const col = header.getAttribute('data-sort');
        const arrow = header.querySelector('.sort-arrow') as HTMLElement;
        if (col === currentSort.column) {
          header.classList.add('text-blue-400');
          if (arrow) {
            arrow.style.opacity = "1";
            if (!currentSort.ascending) {
              arrow.classList.add('rotate-180');
            } else {
              arrow.classList.remove('rotate-180');
            }
          }
        } else {
          header.classList.remove('text-blue-400');
          if (arrow) {
            arrow.style.opacity = "0";
            arrow.classList.remove('rotate-180');
          }
        }
      });
    }

    function sortTable(column: string) {
      if (currentSort.column === column) {
        currentSort.ascending = !currentSort.ascending;
      } else {
        currentSort.column = column;
        currentSort.ascending = true;
      }

      tableData.sort((a, b) => {
        let aVal, bVal;
        switch(column) {
          case 'num':
            aVal = a.num;
            bVal = b.num;
            break;
          case 'tiempo':
            aVal = parseDuration(a.tiempo);
            bVal = parseDuration(b.tiempo);
            break;
          case 'bloques':
            aVal = parseInt(a.bloques.replace(/\./g, ''), 10);
            bVal = parseInt(b.bloques.replace(/\./g, ''), 10);
            break;
          case 'total':
            aVal = parseInt(a.total.replace(/\./g, ''), 10);
            bVal = parseInt(b.total.replace(/\./g, ''), 10);
            break;
          case 'bps':
            const aBps = parseInt(a.bloques.replace(/\./g, ''), 10) / parseDuration(a.tiempo);
            const bBps = parseInt(b.bloques.replace(/\./g, ''), 10) / parseDuration(b.tiempo);
            aVal = aBps;
            bVal = bBps;
            break;
          default:
            aVal = 0;
            bVal = 0;
        }
        return currentSort.ascending ? (aVal - bVal) : (bVal - aVal);
      });

      updateHeaderStyles();
      renderTable(tableData);
    }

    document.querySelectorAll('th[data-sort]').forEach(header => {
      header.addEventListener('click', () => {
        const column = header.getAttribute('data-sort');
        if (column) {
          sortTable(column);
        }
      });
    });

    renderTable(tableData);

    openModalBtn?.addEventListener('click', () => {
      if (!Chart) {
        console.error("chartjs is not available.");
        return;
      }
      modalOverlay?.classList.remove('hidden');
      disableScroll();
      crearGrafica();
    });

    closeModalBtn?.addEventListener('click', () => {
      modalOverlay?.classList.add('hidden');
      enableScroll();
    });

    let chartInstance: Chart | null = null;

    function crearGrafica() {
      const minadoData = JSON.parse(minadoDataElement?.dataset.minado || "[]") as MinadoData[];
      const parseBlocks = (str: string) => parseInt(str.replace(/\./g, ''), 10);

      const labels = minadoData.map(row => `Stream ${row.num}`);
      const bloquesPicados = minadoData.map(row => parseBlocks(row.bloques));
      const tiempos = minadoData.map(row => row.tiempo);

      const ctx = (document.getElementById('minadoChart') as HTMLCanvasElement).getContext('2d');

      if (chartInstance) {
        chartInstance.destroy();
      }

      chartInstance = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Bloques Picados',
            data: bloquesPicados,
            backgroundColor: 'rgba(54, 162, 235, 0.7)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
          }]
        },
        options: {
          plugins: {
            title: { display: true, text: 'Bloques Picados por Stream' },
            tooltip: {
              callbacks: {
                afterBody: (context) => {
                  const index = context[0].dataIndex;
                  return `Tiempo: ${tiempos[index]}`;
                }
              }
            }
          },
          scales: {
            y: { beginAtZero: true, title: { display: true, text: 'Bloques Picados' } },
            x: { title: { display: true, text: 'Stream' } }
          }
        }
      });
    }

    function exportTableToCSV(filename: string) {
      const csv: string[] = [];
      const table = document.getElementById("minadoTable") as HTMLTableElement;
      const rows = table.querySelectorAll("tr");

      rows.forEach(row => {
        const cols = row.querySelectorAll("th, td");
        const rowData: string[] = [];
        cols.forEach(col => {
          let data = "";
          const linkElem = col.querySelector("a");
          if (linkElem) {
            data = (linkElem as HTMLAnchorElement).href;
          } else {
            data = col.textContent?.trim() || "";
          }
          data = data.replace(/(\r\n|\n|\r)/gm, " ").replace(/"/g, '""');
          if (data.indexOf(",") > -1) {
            data = `"${data}"`;
          }
          rowData.push(data);
        });
        csv.push(rowData.join(","));
      });

      const csvFile = new Blob([csv.join("\n")], { type: "text/csv" });
      const tempLink = document.createElement("a");
      tempLink.download = filename;
      tempLink.href = window.URL.createObjectURL(csvFile);
      tempLink.style.display = "none";
      document.body.appendChild(tempLink);
      tempLink.click();
      document.body.removeChild(tempLink);
    }

    const exportCsvBtn = document.getElementById('exportCsvBtn') as HTMLButtonElement;
    exportCsvBtn?.addEventListener('click', () => {
      exportTableToCSV("minado.csv");
    });
  });
</script>