---
import { mods } from "@/data/modData";
import { carpetRules } from "@/data/carpetRulesData";
---

<section class="container mx-auto px-8 md:px-20 pt-8">
  <header class="mb-12 text-center">
    <h2 class="text-4xl md:text-5xl font-bold text-white drop-shadow-lg">
      Listado de Mods STA
    </h2>
    <p class="text-base md:text-lg text-white/60 mt-2">
      Descubre y explora los mods que utiliza Aurigas en su survival
    </p>
  </header>
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
    {mods.map((mod) => (
      <div
        id={mod.name}
        class="bg-[#0a1224] rounded-xl shadow-lg overflow-hidden transform transition-transform duration-300 hover:scale-105"
      >
        <img
          src={mod.image}
          alt={mod.name}
          class="h-48 object-contain p-5 bg-[#121a2e] w-full"
        />
        <div class="p-5">
          <h2 class="text-2xl font-semibold text-white">{mod.name}</h2>
          <p class="text-white/60">{mod.author}</p>
          <a
            href={mod.link}
            target="_blank"
            rel="noopener noreferrer"
            class="mt-5 inline-block text-blue-400 hover:text-blue-500 transition-colors duration-200"
          >
            <i class="fas fa-external-link-alt"></i> Ver detalles
          </a>
        </div>
      </div>
    ))}
  </div>

  <div class="mt-14" id="carpet">
    <div class="flex items-center gap-2">
      <img
        src="/images/emotes/auri-profe.webp"
        alt="Auri profe"
        class="w-14 h-auto"
      />
      <h3 class="text-2xl md:text-3xl font-semibold text-white">
        Carpet Rules activas en STA
      </h3>
      <button
        id="openGeneralModalButton"
        class="text-white/60 hover:text-white scale-110 transition-colors hover:transition-transform hover:scale-105 duration-200 cursor-pointer"
      >
        <i class="fas fa-question-circle"></i>
      </button>
    </div>
    <div class="bg-[#0a1224] rounded-xl shadow p-5">
      <table class="w-full text-white">
        <tbody>
          {carpetRules.map((rule) => (
            <tr
              id={rule.name}
              class="border-b border-white/10 last:border-none hover:bg-white/5 cursor-pointer rule-row"
              data-name={rule.name}
              data-value={rule.value}
              data-desc={rule.desc}
              data-image={rule.image || ""}
            >
              <td class="py-2 font-medium">{rule.name}</td>
              <td class="py-2 text-right font-bold">{rule.value}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>
</section>

<div id="generalModal" class="hidden fixed inset-0 flex items-center justify-center z-50">
  <div id="generalModalOverlay" class="absolute inset-0 bg-black/60"></div>
  <div class="relative bg-[#0a1224] rounded-xl p-6 w-11/12 md:w-1/2 max-w-2xl shadow-xl">
    <button id="closeGeneralModalButton" class="absolute top-3 right-4 text-white cursor-pointer text-3xl">&times;</button>
    <h2 class="text-xl font-bold text-white mb-4">¿Qué son las Carpet Rules?</h2>
    <p class="text-white/70">
      Las Carpet Rules son reglas que agrega el CarpetMod permiten personalizar mecánicas del juego en supervivencia, facilitando la automatización, optimización y control de granjas o sistemas de redstone. Con ellas, puedes mejorar el rendimiento, activar herramientas de depuración y ajustar reglas como la generación de mobs o el stackeo de shulker boxes, haciendo el juego más eficiente sin perder la esencia de supervivencia.
    </p>
  </div>
</div>

<div id="ruleModal" class="hidden fixed inset-0 flex items-center justify-center z-50">
  <div id="ruleModalOverlay" class="absolute inset-0 bg-black/85"></div>
  <div class="relative bg-[#0a1224] rounded-xl p-6 w-11/12 md:max-w-2xl shadow-xl">
    <button id="closeRuleModalButton" class="absolute top-3 right-4 text-white cursor-pointer text-3xl">&times;</button>
    <h2 id="ruleModalTitle" class="text-2xl font-bold text-white mb-1"></h2>
    <p id="ruleModalDesc" class="text-ms text-white/70 py-2"></p>
    <div id="ruleModalImageContainer" class="hidden">
      <img id="ruleModalImage" class="rounded mt-2" alt="Imagen de la regla" />
    </div>
    <p id="ruleModalValue" class="text-white/90 py-3 font-bold"></p>
  </div>
</div>

<script>
  const disableBodyScroll = () => {
    const scrollBarWidth = window.innerWidth - document.documentElement.clientWidth;
    document.body.style.overflow = 'hidden';
    document.body.style.paddingRight = `${scrollBarWidth}px`;
  };

  const enableBodyScroll = () => {
    document.body.style.overflow = '';
    document.body.style.paddingRight = '';
  };

  const toggleModal = (modalElement: HTMLElement | null, open = true) => {
    if (modalElement) {
      modalElement.classList.toggle('hidden', !open);
      open ? disableBodyScroll() : enableBodyScroll();
    }
  };

  const openGeneralModalButton = document.getElementById('openGeneralModalButton');
  const closeGeneralModalButton = document.getElementById('closeGeneralModalButton');
  const generalModal = document.getElementById('generalModal');
  const generalModalOverlay = document.getElementById('generalModalOverlay');

  openGeneralModalButton?.addEventListener('click', () => toggleModal(generalModal, true));
  closeGeneralModalButton?.addEventListener('click', () => toggleModal(generalModal, false));
  generalModalOverlay?.addEventListener('click', () => toggleModal(generalModal, false));

  const ruleModal = document.getElementById('ruleModal');
  const ruleModalOverlay = document.getElementById('ruleModalOverlay');
  const closeRuleModalButton = document.getElementById('closeRuleModalButton');
  const ruleModalTitle = document.getElementById('ruleModalTitle');
  const ruleModalValue = document.getElementById('ruleModalValue');
  const ruleModalDesc = document.getElementById('ruleModalDesc');
  const ruleModalImageContainer = document.getElementById('ruleModalImageContainer');
  const ruleModalImage = document.getElementById('ruleModalImage');

  closeRuleModalButton?.addEventListener('click', () => toggleModal(ruleModal, false));
  ruleModalOverlay?.addEventListener('click', () => toggleModal(ruleModal, false));

  const ruleRows = document.querySelectorAll('.rule-row');
  ruleRows.forEach((row) => {
    row.addEventListener('click', () => {
      const name = row.getAttribute('data-name') || '';
      const value = row.getAttribute('data-value') || '';
      const desc = row.getAttribute('data-desc') || '';
      const image = row.getAttribute('data-image') || '';

      if (ruleModalTitle) ruleModalTitle.textContent = name;
      if (ruleModalValue) ruleModalValue.textContent = `Valor actual: ${value}`;
      if (ruleModalDesc) ruleModalDesc.textContent = desc;

      if (image) {
        if (ruleModalImage instanceof HTMLImageElement) ruleModalImage.src = image;
        ruleModalImageContainer?.classList.remove('hidden');
      } else {
        ruleModalImageContainer?.classList.add('hidden');
      }
      toggleModal(ruleModal, true);
    });
  });
</script>